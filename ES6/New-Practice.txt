Arrow Functions provide a concise syntax for writing functions,especially useful fr short, one-line operations.

    ES5 function
function addition(a, b) {
    return a + b;
}
    ES6 arrow function
const addition = (a, b) => a + b;

    Template Literals 
Allows embedding expressions inside strings,providing a cleaner & more readable way to concatenate strings.

const name = 'Jack';
const greeting = `Hello, ${name}!`;
console.log(greeting); //Hello, Jack!

    Destructing Assignment
Simplifies the extraction of values from objects or arrays into individual variables.

const person = { name: 'Atlee', age: 37 };
    Extracting properties
const { name, age } = person;
console.log('Name:', name, 'Age:', age); //Name: Atlee Age: 37

    Spread Operator
It allows for the expansion of elements, making it handy for creating new arrays or objects based on existing ones.

const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5];
console.log('newNumbers:', newNumbers); //newNumbers: [ 1, 2, 3, 4, 5 ]

    Rest Parameter
Allows functions to accept an indefinite number of arguments as an array, simplifying parameter handling.

 const sum = (...numbers) => {
    return numbers.reduce((acc, num) => {
        return acc + num;
    }, 0);
};
console.log(sum(1, 2, 3)); //6