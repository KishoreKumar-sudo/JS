Arrow Functions provide a concise syntax for writing functions,especially useful fr short, one-line operations.

    ES5 function
function addition(a, b) {
    return a + b;
}
    ES6 arrow function
const addition = (a, b) => a + b;

    Template Literals 
Allows embedding expressions inside strings,providing a cleaner & more readable way to concatenate strings.

const name = 'Jack';
const greeting = `Hello, ${name}!`;
console.log(greeting); //Hello, Jack!

    Destructing Assignment
Simplifies the extraction of values from objects or arrays into individual variables.

const person = { name: 'Atlee', age: 37 };
    Extracting properties
const { name, age } = person;
console.log('Name:', name, 'Age:', age); //Name: Atlee Age: 37

    Spread Operator
It allows for the expansion of elements, making it handy for creating new arrays or objects based on existing ones.

const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5];
console.log('newNumbers:', newNumbers); //newNumbers: [ 1, 2, 3, 4, 5 ]

    Rest Parameter
Allows functions to accept an indefinite number of arguments as an array, simplifying parameter handling.

 const sum = (...numbers) => {
    return numbers.reduce((acc, num) => {
        return acc + num;
    }, 0);
};
console.log(sum(1, 2, 3)); //6

    Async/await
It's a syntaxfor handling asynchronous code more concisely, providing a cleaner alternative to working with promises.

const API = 'https://api.example.com';
const fetchData = async () => {
    try {
        const result = await fetch(`${API}/data`);
        const data = await result.json();
        console.log(data);
    } catch (error) {
        console.error(error);
    }
};

    Map & Set 
Map and Set are new data structures introduced in ES6.
Map is an ordered collection of key-value pairs,
Set is a collection of unique values.

//Creating a map with a key-value pair
const numberMap =new Map().set('one',1);
 
//Creating a Set with unique numbers
const unique =new Set([1,2,3,2,1]);

unique.forEach(number=>console.log(number));
// 1
// 2
// 3

    Default Parameters
It provide values for function parameters if none are provided, improving flexibility and reducing the need for explicit checks.

const greet = (name = 'Guest') => {
    return `Hello, ${name}!`;
};

console.log(greet());//Hello, Guest!

console.log(greet('John')); //Hello, John!

    Modules
ES6 modules provide a clean and organized way to strucutre and import/export code, improving maintainability and reusability.

//Exporting module
export const myFunction = () => {...};

//Importing module
import { myFunction } from './myModule';

    Map Method
The map method in javascript is used to create a new array by applying a provided function to each element of an existing array.

const numbers = [1, 2, 3, 4, 5]
const doubled = numbers.map(num => num * 2)

console.log(doubled); //[ 2, 4, 6, 8, 10 ]

    Filter Method
This mtd is used to create a new array containing only the elements that satisfy a specified condition.
const numbers = [1, 2, 3, 4, 5];
const evens = numbers.filter(num => num % 2 === 0);

console.log(evens); //[ 2, 4 ]

    Reduce Method
It's used to accumulate the elements of an array into a single value.
const data = [1, 2, 3, 4, 5];
const sum = data.reduce((acc, num) => acc + num, 0);

console.log(sum);//15

    Boolean Casting
Recommended mtd according to Airbnb's style guide.
    Old
const age = boolean(input.value);
    New
const age = !!input.value;

    Optional Chaining
Reading deeply nested property without hassle of checking each time of its validity.
    Old
let isValid = {user} => user && user.address && user.address.zipcode;
    New
let isValid= {address} => user?.address?.zipcode;

    Nullish Coalescing 
Returns the right hand when the left-hand operand is null or undefined 
 const tap = getProductById(1);
 const product = tap != null && tmp != undefined ? : tmp :unknown;
  