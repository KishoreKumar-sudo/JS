what is the purpose of a JS function => To Perform Task/Calculation

which mtd tests if atleast one element meets a condition=> some()

HTML is a subset of => XHTML

which computer language structures all web pages on the internet => HTML 
Shallow copy method example:
arr.slice(0)
[].concat(arr1)
Spread Operator
Object.create({}, obj)
Object.assign({}, obj)
Array.from(arr1)

Datatypes:
String, Number, Big-int, Boolean, Undefined, Null, Symbol, object

3-Ways to Declare & JS variable:
using var, let, const

Operators:
Arithmetic, Assignment, Comparison, Logical, Conditional & Type Operators.

Comparison Operators:
>(greater than), <(less than), >=(greater than or equal to), <=(less than or equal to), ?(Ternary)

Logical Operators:
&& logical And,
|| logical Or,
!  logical not 

Type Operators:
"typeof" returns the type of variable.
"instanceof" returns true if an object is an instance of an object type.

Statements:
let x,y,z //Statement 1
x = 10 //Statement 2
y = 24 //Statement 3
z = x + y //Statement 4

JS Display possibilites:
Writing into an HTML element, using innerHTML.
Writing into the HTML output, using document.write().
Writing into an alert box, using window.alert().
Writing into the  browser console, using console.log().

Events:
onclick, onchange, onkeydown, onload, onmouseover, onmouseout, onmousedown, onmouseup, onmousemove

Declare:
let a,b,c; //Declare 3 variables
a = 15; //Assign the value 5 to a
b = 16; //Assign the value 6 to b
c = a + b; //Assign the sum of a and b to c

when separated by semicolons, multiple statements on one line are allowed:
a = 5; b=6; c = a+b;

Syntax:
//How to create variiables: var x; let y;
//How to use variables: x = 5;y = 6;
let z = x + y;

Strings:
JS Strings are fr storing & amnipulating txt.
let text = "Kishore";
console.log(text);

String Length
let texts = "Kishore";
console.log(texts.length);

String Methods:
String length
String slice()
String subString()
String substr()
String replace()
string replaceAll()
String toUpperCase()
String toLowerCase()
String concat()
String trim()
String trimStart()
String trimEnd()
String padStart()
String padEnd()
String charAt()
String charCodeAt()
String split()

Template Literals
Template Strings
String Templates
Back-Tics Syntax  

Back-Tics Syntax: 
Template Literals use back-ticks (``) rather than the quotes("") to define a string.
    Ex:
let text1 =`Pushpendra`;
console.log(text1) //Pushpendra

JS Template Literals:
    Quotes Inside Strings
        With template literals u can use both single & double quotes inside a string.

Ex:
let text2 =`He's often called "Push"`;
console.log(text2) //He's often called "Push"

Multiline Strings:
    Template literals allows multiline strings.

Ex:
    let text=`The quick brown fox jumps over the lazy dog`;
    console.log(text)

Variable Substitutions:
Template literals allow variables in strings. 

Ex:
    let firstname = "KishoreKumar";
    let lastname = "Padamanabhan";
    let text = `Welcome${firstname},${lastname}!`;
    console.log(text); //Welcome KishoreKumar,Padamanabhan!

JS Date Formats:
    Date inputs
ISO Date "2023-06-22"(The International Standard);
Short Date "06/22/2023";
Long Date "Jun 22 2023" or "22 Jun 2023";

Storage API
    Storage Object Properties & Mtds:
clear()
getItem()
key()
length
setItem()
removeItem()
window.localStorage
window.sessionStorage

Console Object:
    The Console Object provides access to the browser's debugging console.
assert()
clear()
count()
error()
group()
groupCollapsed()
groupEnd()
info()
log()
table()
time()
timeEnd()
